

- name: init ansible_flags directory
  shell: mkdir -p /etc/ansible_flags/ || true
  changed_when: false

- name: read ansible_flags
  find:
    paths: /etc/ansible_flags/
  register:
    ansible_flags

#####################

- name: disable motd
  shell:
    cmd: |
      set -eu
      chmod -x /etc/update-motd.d/*
      touch "/etc/ansible_flags/{{ ansible_flag_check_filename }}"
    executable: /bin/bash
  vars:
    ansible_flag_check_filename: "disable_motd"
  when:
    ((ansible_flags | json_query("files[?path=='/etc/ansible_flags/" + ansible_flag_check_filename + "'].path") | length()) == 0)

- name: uninstall unattended-upgrades
  apt:
    pkg:
      - unattended-upgrades
    state: absent

- name: Disable apt-daily.timer
  systemd:
    name: apt-daily.timer
    state: stopped
    enabled: false

- name: Disable apt-daily.service
  systemd:
    name: apt-daily.service
    state: stopped
    enabled: false
  changed_when:
    false

- name: delete user1 if remains
  user:
    name: user1
    state: absent
    remove: yes
    force: yes
  when: (not (do_not_delete_user1 | default()))

- name: delete user ubuntu if remains
  user:
    name: ubuntu
    state: absent
    remove: yes
    force: yes
  when: (delete_user_ubuntu | default())

- name: apt change source servers to Japan 1
  replace:
    dest: /etc/apt/sources.list
    regexp: '/us.archive'
    replace: '/jp.archive'
    backup: true

- name: apt change source servers to Japan 2
  replace:
    dest: /etc/apt/sources.list
    regexp: '/archive'
    replace: '/jp.archive'
    backup: true

- name: apt update
  apt:
    update_cache: true
    cache_valid_time: 3600
  when: true
  ignore_errors: true
  changed_when: false

# 18.04
- name: apt install (bionic)
  apt:
    pkg:
      - ssh
      - iputils-ping
      - dnsutils
      - wget
      - ifupdown
      - bc
      - build-essential
      - cifs-utils
      - cmake
      - conntrack
      - cu
      - cvs
      - debconf
      - dnsutils
      - ebtables
      - emacs
      - ethtool
      - ftp
      - g++
      - gcc
      - gettext
      - git
      - hostapd
      - ifupdown
      - irqbalance
      - jq
      - less
      - libncurses5-dbg
      - libncurses5-dev
      - libreadline-dev
      - libssl-dev
      - libtool
      - libusb-dev
      - lm-sensors
      - lynx
      - nano
      - ncurses-base
      - ncurses-bin
      - ncurses-dev
      - ntp
      - openbsd-inetd
      - openssl
      - patch
      - patchutils
      - psmisc
      - python
      - python-urwid
      - readline-common
      - ruby
      - samba-client
      - samba-common
      - screen
      - snmp
      - snmpd
      - subversion
      - sudo
      - tcpdump
      - tcsh
      - telnet
      - tftp
      - traceroute
      - usb-modeswitch
      - whois
      - wireless-tools
      - zlib1g-dev
      - lib32stdc++6
      - g++-multilib
      - bridge-utils
      - syslog-ng-core
      - aptitude
      - sysstat
      - dstat
      - apt-transport-https
      - net-tools
      - flex
      - bison
      - ntpdate
    update_cache: false
  when: ansible_distribution_release == 'bionic'
  async: 3600
  poll: 1

# 19.10
- name: apt install (eoan)
  apt:
    pkg:
      - ssh
      - iputils-ping
      - dnsutils
      - wget
      - ifupdown
      - bc
      - build-essential
      - cifs-utils
      - cmake
      - conntrack
      - cu
      - cvs
      - debconf
      - dnsutils
      - ebtables
      - emacs
      - ethtool
      - ftp
      - g++
      - gcc
      - gettext
      - git
      - hostapd
      - ifupdown
      - irqbalance
      - jq
      - less
      - libncurses5-dev
      - libreadline-dev
      - libssl-dev
      - libtool
      - libusb-dev
      - lm-sensors
      - lynx
      - nano
      - ncurses-base
      - ncurses-bin
      - ncurses-dev
      - ntp
      - openbsd-inetd
      - openssl
      - patch
      - patchutils
      - psmisc
      - python
      - python-urwid
      - readline-common
      - ruby
      - samba-client
      - samba-common
      - screen
      - snmp
      - snmpd
      - subversion
      - sudo
      - tcpdump
      - tcsh
      - telnet
      - tftp
      - traceroute
      - usb-modeswitch
      - whois
      - wireless-tools
      - zlib1g-dev
      - bridge-utils
      - syslog-ng-core
      - aptitude
      - sysstat
      - dstat
      - apt-transport-https
      - net-tools
      - flex
      - bison
      - ntpdate
    update_cache: false
  when: ansible_distribution_release == 'eoan'
  async: 3600
  poll: 1

# 20.04
- name: apt install (focal)
  apt:
    pkg:
      - ssh
      - iputils-ping
      - dnsutils
      - wget
      - ifupdown
      - bc
      - build-essential
      - cifs-utils
      - cmake
      - conntrack
      - cu
      - cvs
      - debconf
      - dnsutils
      - ebtables
      - emacs
      - ethtool
      - ftp
      - g++
      - gcc
      - gettext
      - git
      - hostapd
      - ifupdown
      - irqbalance
      - jq
      - less
      - libncurses5-dev
      - libreadline-dev
      - libssl-dev
      - libtool
      - libusb-dev
      - lm-sensors
      - lynx
      - nano
      - ncurses-base
      - ncurses-bin
      - ncurses-dev
      - ntp
      - openbsd-inetd
      - openssl
      - patch
      - patchutils
      - psmisc
      - python
      - readline-common
      - ruby
      - samba-client
      - samba-common
      - screen
      - snmp
      - snmpd
      - subversion
      - sudo
      - tcpdump
      - tcsh
      - telnet
      - tftp
      - traceroute
      - usb-modeswitch
      - whois
      - wireless-tools
      - zlib1g-dev
      - bridge-utils
      - syslog-ng-core
      - aptitude
      - sysstat
      - dstat
      - apt-transport-https
      - net-tools
      - flex
      - bison
      - ntpdate
    update_cache: false
  when: ansible_distribution_release == 'focal'
  async: 3600
  poll: 1

- name: Stop snapd.service (only for bionic)
  systemd:
    name: snapd.service
    state: stopped
    enabled: false
  when: ansible_distribution_release == 'bionic'

- name: Stop apparmor (only for bionic)
  systemd:
    name: apparmor
    state: stopped
    enabled: false
  when: ansible_distribution_release == 'bionic'

- name: uninstall apparmor and snapd (only for bionic)
  apt:
    pkg:
      - apparmor
      - snapd
    state: absent
  when: ansible_distribution_release == 'bionic'

# - name: set hostname
#   hostname:
#     name: "{{ common_autogenerated_host_fqdn }}"
#   notify: common_reboot_host

- name: set hostname with hostname file
  template:
    src: files/settings/hostname.j2
    dest: /etc/hostname
    mode: 0644
    backup: true
  notify:
    common_reboot_host

- name: upload 00-network.rules
  copy:
    dest: /etc/udev/rules.d/00-network.rules
    content: "{{ eth_settings }}"
  notify: common_reboot_host

- name: upload /etc/network/interfaces
  copy:
    dest: /etc/network/interfaces
    content: "{{ ip_settings }}"
    backup: true
  notify: common_reboot_host

- name: upload resolv.conf
  copy:
    dest: /etc/resolv.conf
    content: "{{ resolv_conf_contents }}"
    backup: true

- name: enable root user to load PPP modules
  user:
    name: root
    groups: dialout
    append: true
  notify: common_reboot_host

- name: copy pkgs files
  copy:
    src: files/pkgs/
    dest: /root/pkgs/

- block:
  - name: check speedometer exists
    stat:
      path: /usr/local/bin/speedometer
    register: stat_result

  - name: install speedometer
    shell: |
      set -eu
      rm -fr /root/tmp/speedometer/
      mkdir -p /root/tmp/speedometer/
      cd /root/tmp/speedometer/
      cp /root/pkgs/speedometer-2.8.tar.gz ./
      tar xzvf speedometer-2.8.tar.gz
      cd speedometer-2.8
      cp speedometer.py /usr/local/bin/speedometer
      chown root: /usr/local/bin/speedometer
      chmod 755 /usr/local/bin/speedometer
    when:
      stat_result.stat.exists == false or stat_result.stat.mode != '0755' or stat_result.stat.pw_name != 'root'

- name: install itop
  copy:
    src: files/pkgs/itop
    dest: /bin/itop
    mode: 0755

- name: install pps
  copy:
    src: files/pkgs/pps
    dest: /bin/pps
    mode: 0755

- name: sensors-detect
  shell: |
    yes | sensors-detect
    touch "/etc/ansible_flags/{{ ansible_flag_check_filename }}"
  vars:
    ansible_flag_check_filename: "sensors-detect"
  when:
    ((ansible_flags | json_query("files[?path=='/etc/ansible_flags/" + ansible_flag_check_filename + "'].path") | length()) == 0)

- name: delete .tcshrc
  file:
    path: /root/.tcshrc
    state: absent
    backup: true

- name: create /etc/vmware-tools/
  file:
    path: /etc/vmware-tools/
    state: directory
    owner: root
    mode: 0755
  changed_when: false

- name: install files for comfortable
  copy:
    src: "files/comfortable/{{ item.src }}"
    dest: "{{ item.dest }}"
    backup: true
  with_items:
    - { src: '.bashrc', dest: '/root/.bashrc' }
    - { src: '.hushlogin', dest: '/root/.hushlogin' }
    - { src: '.cshrc', dest: '/root/.cshrc' }
    - { src: '.emacs', dest: '/root/.emacs' }
    - { src: '.screenrc', dest: '/root/.screenrc' }
    - { src: 'ixgbe-options.conf', dest: '/etc/modprobe.d/ixgbe-options.conf' }
    - { src: 'vmware-tools-tools.conf', dest: '/etc/vmware-tools/tools.conf' }

- name: Configure syslog-ng.conf 1
  lineinfile:
    dest: /etc/syslog-ng/syslog-ng.conf
    regexp: '^#*{{ item.target }}.*$'
    line: '{{ item.target }} {{ item.new }}'
    state: present
    backup: true
    backrefs: false
  register:
    update_syslog_ng_1
  with_items:
    - { target: 'destination d_alive', new: '{ udp("{{ common_syslog_server }}"); };' }

- name: Configure syslog-ng.conf 2
  lineinfile:
    dest: /etc/syslog-ng/syslog-ng.conf
    regexp: '^(.*{{ item.regex | regex_escape() }})(?!.*{{ item.insert_string | regex_escape() }})(.*)$'
    line: '\1 {{ item.insert_string }} \2'
    state: present
    backup: true
    backrefs: true
  with_items:
    - { regex: 'filter(f_messages); destination(d_messages);', insert_string: 'destination(d_alive);' }
    - { regex: 'filter(f_auth); destination(d_auth);', insert_string: 'destination(d_alive);' }
  register:
    update_syslog_ng_2

- name: enable syslog-ng
  systemd:
    name: syslog-ng
    state: started
    enabled: true

- name: restart syslog-ng
  systemd:
    name: syslog-ng
    state: restarted
    enabled: true
  when: update_syslog_ng_1.changed or update_syslog_ng_2.changed

- name: Configure /etc/systemd/journald.conf
  lineinfile:
    dest: /etc/systemd/journald.conf
    regexp: '^#*{{ item.target }} *=.*$'
    line: '{{ item.target }}={{ item.new }}'
    state: present
    backup: true
    backrefs: false
  register: update_journald
  with_items:
    - { target: 'ForwardToSyslog', new: 'yes' }
    - { target: 'SystemMaxUse', new: '100M' }
    - { target: 'SystemMaxFileSize', new: '1M' }

- name: restart journald
  systemd:
    name: systemd-journald.service
    state: restarted
    enabled: true
  when: update_journald.changed

- name: upload /etc/snmp/snmpd.conf
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    backup: true
  register: update_snmpd
  with_items:
    - { src: 'files/settings/snmpd_debian.conf', dest: '/etc/snmp/snmpd.conf' }

- name: enable or disable snmpd
  systemd:
    name: snmpd
    state: "{{ 'stopped' if (disable_snmp | default()) else 'started' }}"
    enabled: "{{ false if (disable_snmp | default()) else true }}"

- name: create snmpwork config file directory
  file:
    path: /etc/se_snmpwork/Local/App_TestDev/Config/
    state: directory
    owner: root
    mode: 0755
  when:
    (snmpwork_install | default(false))
  changed_when: false

- name: install snmpwork config file
  template:
    src: files/settings/SnmpWork.json.j2
    dest: /etc/se_snmpwork/Local/App_TestDev/Config/SnmpWork.json
    mode: 0644
    backup: true
  when:
    ((snmpwork_install | default(false)) and (not (snmpwork_manual_config | default(false))))
  changed_when: false

- name: install and run snmpwork
  shell:
    cmd: |
      if [ ! -f /etc/se_snmpwork/install_script_called.txt ]; then
        bash <(curl -4 --insecure --pinnedpubkey "sha256//lvnOVgA0u06WySztudkn+urQda/zFBRd65A5wCmcBpQ=" --raw --silent https://static.lts.dn.ipantt.net/d/210110_006_snmpwork_50463/snmpwork_install.sh)
        echo __installed123__
      fi
    executable: /bin/bash
  register:
    install_snmpwork_stdout
  when:
    (snmpwork_install | default(false))
  changed_when: " '__installed123__' in install_snmpwork_stdout.stdout "

- name: restart snmpd
  systemd:
    name: snmpd
    state: restarted
    enabled: true
  when: update_snmpd.changed and (not (disable_snmp | default()))

- name: enable or disable ntp
  systemd:
    name: ntp
    state: "{{ 'stopped' if (disable_ntp | default()) else 'started' }}"
    enabled: "{{ false if (disable_ntp | default()) else true }}"

- name: call timedatectl set-ntp false
  shell: timedatectl set-ntp false || true
  changed_when: false

- name: set timezone to Asia/Tokyo
  timezone:
    name: Asia/Tokyo

- name: Configure /etc/sysctl.conf
  lineinfile:
    dest: /etc/sysctl.conf
    regexp: '^#*{{ item.target }} *=.*$'
    line: '{{ item.target }}={{ item.new }}'
    state: present
    backup: true
    backrefs: false
  register: update_sysctl
  with_items:
    - { target: 'kernel.panic', new: '15' }
    - { target: 'kernel.panic_on_oops', new: '1' }
    - { target: 'vm.overcommit_memory', new: '0' }
    - { target: 'vm.overcommit_ratio', new: '90' }
    - { target: 'vm.panic_on_oom', new: '0' }
    - { target: 'vm.oom_kill_allocating_task', new: '1' }
    - { target: 'kernel.sysrq', new: '0' }
    - { target: 'kernel.core_uses_pid', new: '1' }
    - { target: 'net.ipv4.tcp_syncookies', new: '1' }
    - { target: 'net.ipv4.conf.default.accept_source_route', new: '0' }
    - { target: 'net.ipv4.conf.all.arp_filter', new: '1' }
    - { target: 'net.ipv4.conf.default.arp_filter', new: '1' }
    - { target: 'net.ipv4.conf.all.arp_ignore', new: '1' }
    - { target: 'net.ipv4.conf.default.arp_ignore', new: '1' }
    - { target: 'net.ipv4.conf.all.arp_announce', new: '1' }
    - { target: 'net.ipv4.conf.default.arp_announce', new: '1' }
    - { target: 'net.core.rmem_default', new: '16777216' }
    - { target: 'net.core.rmem_max', new: '16777216' }
    - { target: 'net.core.wmem_default', new: '16777216' }
    - { target: 'net.core.wmem_max', new: '16777216' }
    - { target: 'net.ipv4.conf.default.rp_filter', new: '0' }
    - { target: 'net.ipv4.conf.all.rp_filter', new: '0' }
    - { target: 'net.ipv4.neigh.default.gc_thresh1', new: '{{ arp_cache_thresh1 | default("4000") }}' }
    - { target: 'net.ipv4.neigh.default.gc_thresh2', new: '{{ arp_cache_thresh2 | default("6000") }}' }
    - { target: 'net.ipv4.neigh.default.gc_thresh3', new: '{{ arp_cache_thresh3 | default("8000") }}' }
    - { target: 'net.ipv6.neigh.default.gc_thresh1', new: '{{ arp_cache_thresh1 | default("4000") }}' }
    - { target: 'net.ipv6.neigh.default.gc_thresh2', new: '{{ arp_cache_thresh2 | default("6000") }}' }
    - { target: 'net.ipv6.neigh.default.gc_thresh3', new: '{{ arp_cache_thresh3 | default("8000") }}' }
    - { target: 'net.ipv4.icmp_echo_ignore_broadcasts', new: '1' }
    - { target: 'net.core.somaxconn', new: '1024' }
    - { target: 'net.ipv4.tcp_tw_reuse', new: '1' }
    - { target: 'net.ipv4.tcp_max_syn_backlog', new: '1024' }
    - { target: 'net.ipv4.tcp_fin_timeout', new: '4' }
    - { target: 'net.ipv4.tcp_rmem', new: '4096 87380 5955584' }
    - { target: 'net.ipv4.tcp_wmem', new: '4096 65536 5955584' }
    - { target: 'net.ipv4.tcp_timestamps', new: '0' }
    - { target: 'net.ipv4.icmp_ratelimit', new: '1' }
    - { target: 'net.ipv6.icmp.ratelimit', new: '1' }
    - { target: 'net.ipv4.icmp_errors_use_inbound_ifaddr', new: '1' }
    - { target: 'kernel.sem', new: '65536 655360 64 32768' }
    - { target: 'kernel.msgmni', new: '32768' }
    - { target: 'fs.inotify.max_queued_events', new: '1048576' }
    - { target: 'fs.inotify.max_user_instances', new: '1048576' }
    - { target: 'fs.inotify.max_user_watches', new: '1048576' }
    - { target: 'fs.file-max', new: '1048575' }
    - { target: 'fs.aio-max-nr', new: '1048575' }
    - { target: 'kernel.msgmax', new: '1048575' }
    - { target: 'kernel.msgmnb', new: '1048575' }
    - { target: 'kernel.threads-max', new: '1048575' }
    - { target: 'kernel.pid_max', new: '4194303' }
    - { target: 'vm.max_map_count', new: '4194304' }
    - { target: 'net.core.netdev_max_backlog', new: '182757' }
    - { target: 'kernel.dmesg_restrict', new: '1' }
    # IPv4 forwarding
    - { target: 'net.ipv4.ip_forward', new: '{{ "1" if (enable_ipv4_forward | default()) else "0" }}' }
    - { target: 'net.ipv4.conf.all.forwarding', new: '{{ "1" if (enable_ipv4_forward | default()) else "0" }}' }
    - { target: 'net.ipv4.conf.default.forwarding', new: '{{ "1" if (enable_ipv4_forward | default()) else "0" }}' }
    # IPv6 forwarding
    - { target: 'net.ipv6.conf.all.forwarding', new: '{{ "1" if (enable_ipv6_forward | default()) else "0" }}' }
    - { target: 'net.ipv6.conf.default.forwarding', new: '{{ "1" if (enable_ipv6_forward | default()) else "0" }}' }
    # IPv6 disable
    - { target: 'net.ipv6.conf.all.disable_ipv6', new: '{{ "1" if (disable_ipv6_all | default()) else "0" }}' }
    - { target: 'net.ipv6.conf.default.disable_ipv6', new: '{{ "1" if (disable_ipv6_all | default()) else "0" }}' }
    # IPv6 Disable Random Address
    - { target: 'net.ipv6.conf.all.use_tempaddr', new: '0' }
    - { target: 'net.ipv6.conf.default.use_tempaddr', new: '0' }

- name: apply sysctl.ctl to system
  shell: sysctl -p || true
  when: update_sysctl.changed

- name: upload /etc/logrotate.conf
  copy:
    src: "files/settings/logrotate_debian.conf"
    dest: "/etc/logrotate.conf"
    backup: true

- name: create /var/log/old/
  file:
    path: /var/log/old/
    state: directory
    owner: root
    mode: 0777
  changed_when: false

- name: move /etc/cron.daily/logrotate to /etc/cron.hourly/logrotate
  shell:
    mv /etc/cron.daily/logrotate /etc/cron.hourly/logrotate && echo __ok__ || echo __ng__
  register:
    cron_mv_logrotate
  changed_when: " '__ok__' in cron_mv_logrotate.stdout "

- name: enable cron.service
  systemd:
    name: cron.service
    state: started
    enabled: true

- name: restart cron.service
  systemd:
    name: cron.service
    state: restarted
    enabled: true
  when: cron_mv_logrotate.changed

- name: upload /etc/security/limits.conf
  copy:
    src: "files/settings/limits_debian.conf"
    dest: "/etc/security/limits.conf"
    backup: true
  notify:
    common_reboot_host

- name: upload scripts
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0755
    backup: true
  with_items:
    - { src: 'files/scripts/init_rss.sh', dest: '/bin/init_rss.sh' }
    - { src: 'files/scripts/se_backup_simple_dir.sh', dest: '/bin/se_backup_simple_dir.sh' }
    - { src: 'files/scripts/se_backup_simple_dir_safe.sh', dest: '/bin/se_backup_simple_dir_safe.sh' }
    - { src: 'files/scripts/se_backup_lxd_containers_safe.sh', dest: '/bin/se_backup_lxd_containers_safe.sh' }
    - { src:  '{{ snmp_temperature_script_name | default("files/scripts/se_snmp_temperature.sh") }}', dest: '/etc/se_snmp_temperature.sh' }
    - { src: 'files/scripts/nic_disable_offload.sh', dest: '/bin/nic_disable_offload' }
    - { src: 'files/scripts/nic_enable_offload.sh', dest: '/bin/nic_enable_offload' }
    - { src: 'files/scripts/wait_for_network_init_3.debian.sh', dest: '/bin/wait_for_network_init_3' }
    - { src: 'files/scripts/rc.local', dest: '/etc/rc.local' }
    - { src: 'files/scripts/se_boot_all.sh', dest: '/etc/se_boot_all.sh' }
    - { src: 'files/scripts/se_boot_network_all.sh', dest: '/etc/se_boot_network_all.sh' }
    - { src: 'files/scripts/se_lxd_guest_fixbug1_ipv6_ra.sh', dest: '/bin/se_lxd_guest_fixbug1_ipv6_ra' }
    - { src: 'files/scripts/se_common_bash.sh', dest: '/etc/profile.d/se_common_bash.sh' }
    - { src: 'files/scripts/se_connect_to_nfs.sh', dest: '/etc/se_connect_to_nfs.sh' }
    - { src: 'files/scripts/se_check_nfs_health_reboot_if_fail.sh', dest: '/etc/se_check_nfs_health_reboot_if_fail.sh' }
    - { src: 'files/scripts/se_check_nfs_health_killall_if_fail.sh', dest: '/etc/se_check_nfs_health_killall_if_fail.sh' }
    - { src: 'files/scripts/se_ntpdate_start.sh', dest: '/etc/se_ntpdate_start.sh' }
    - { src: 'files/scripts/se_ntpdate_loop.sh', dest: '/etc/se_ntpdate_loop.sh' }
    - { src: 'files/scripts/se_lxd_delete_snap_cache.sh', dest: '/etc/se_lxd_delete_snap_cache.sh' }
    - { src: 'files/settings/sysstat.txt', dest: '/etc/default/sysstat' }

- name: upload se_boot_network_boottime1.sh
  template:
    src: files/scripts/se_boot_network_boottime1.sh.j2
    dest: /etc/se_boot_network_boottime1.sh
    mode: 0755
    backup: true
  notify:
    common_reboot_host

- name: upload se_boot_network_boottime2.sh
  template:
    src: files/scripts/se_boot_network_boottime2.sh.j2
    dest: /etc/se_boot_network_boottime2.sh
    mode: 0755
    backup: true
  notify:
    common_reboot_host

- name: upload se_add_static_routes.sh.j2
  template:
    src: files/scripts/se_add_static_routes.sh.j2
    dest: /etc/se_add_static_routes.sh
    mode: 0755
    backup: true
  notify:
    common_reboot_host

- name: upload se_network_dynamic.sh
  template:
    src: files/scripts/se_network_dynamic.sh.j2
    dest: /etc/se_network_dynamic.sh
    mode: 0755
    backup: true
  register: se_network_dynamic

- name: reload se_network_dynamic.sh
  shell:
    cmd: |
      set -eu
      /etc/se_network_dynamic.sh
    executable: /bin/bash
  vars:
    ansible_flag_check_filename: "first_install_rebooted"
  when:
    se_network_dynamic.changed and ((ansible_flags | json_query("files[?path=='/etc/ansible_flags/" + ansible_flag_check_filename + "'].path") | length()) != 0)

- name: enable sysstat.service
  systemd:
    name: sysstat.service
    state: started
    enabled: true

- name: Allow TLSv1
  shell:
    cmd: |
      set -eu
      cp -n /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.original210111
      c1=$(cat /etc/ssl/openssl.cnf | grep -F SECLEVEL=1 | wc -l)
      if [ $c1 -eq 0 ]; then
        sed -i '1i openssl_conf = default_conf' /etc/ssl/openssl.cnf && echo -e "\n[ default_conf ]\nssl_conf = ssl_sect\n[ssl_sect]\nsystem_default = system_default_sect\n[system_default_sect]\nMinProtocol = TLSv1\nCipherString = DEFAULT:@SECLEVEL=1" >> /etc/ssl/openssl.cnf
      fi
      touch "/etc/ansible_flags/{{ ansible_flag_check_filename }}"
    executable: /bin/bash
  vars:
    ansible_flag_check_filename: "allow_tlsv1"
  when:
    ((ansible_flags | json_query("files[?path=='/etc/ansible_flags/" + ansible_flag_check_filename + "'].path") | length()) == 0)


## Special tasks
- name: special - install Intel i40e-update driver - copy files
  copy:
    src: files/special/i40e-2.7.29.tar.gz
    dest: /root/pkgs/i40e-2.7.29.tar.gz
  when: (special_install_i40e_update_driver | default(false))

- name: special - install Intel i40e-update driver - install
  shell:
    cmd: |
      set -eu
      cd /root/
      mkdir -p i40e-update-2.7.29/
      cd i40e-update-2.7.29/
      cp /root/pkgs/i40e-2.7.29.tar.gz ./i40e-2.7.29.tar.gz
      tar xzvf i40e-2.7.29.tar.gz
      cd i40e-2.7.29/src/
      make
      make install
      touch "/etc/ansible_flags/{{ ansible_flag_check_filename }}"
    executable: /bin/bash
  vars:
    ansible_flag_check_filename: "special_install_i40e_update_driver_ver_2_7_29"
  when:
    (special_install_i40e_update_driver | default(false)) and ((ansible_flags | json_query("files[?path=='/etc/ansible_flags/" + ansible_flag_check_filename + "'].path") | length()) == 0)
  notify:
    common_reboot_host


## Special tasks
- name: special - install and configure HP SmartArray RAID - copy files
  copy:
    src: files/special/ssacli-2.60-19.0.x86_64.rpm
    dest: /root/pkgs/ssacli-2.60-19.0.x86_64.rpm
  when: (special_config_hp_smart_array | default(false))

- name: special - install and configure HP SmartArray RAID - install
  shell:
    cmd: |
      set -eu
      apt-get -y install rpm
      cd /root/pkgs/
      rpm -ivh --nodeps --force ssacli-2.60-19.0.x86_64.rpm
      /usr/sbin/ssacli help
      /usr/sbin/ssacli controller slot=0 add licensekey={{ lab_hp_smart_array_license_key }} || true
      /usr/sbin/ssacli controller slot=0 modify dwc=enable forced || true
      /usr/sbin/ssacli controller slot=0 modify irp=enable || true
      touch "/etc/ansible_flags/{{ ansible_flag_check_filename }}"
    executable: /bin/bash
  vars:
    ansible_flag_check_filename: "special_config_hp_smart_array"
  when:
    (special_config_hp_smart_array | default(false)) and ((ansible_flags | json_query("files[?path=='/etc/ansible_flags/" + ansible_flag_check_filename + "'].path") | length()) == 0)

